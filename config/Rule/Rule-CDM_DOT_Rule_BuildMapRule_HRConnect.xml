<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="OLU Build Map Rule" type="BuildMap">
  <Description>
  This rule is used by the delimited file connector to build a map representation of the delimited data.
  </Description>
  <Signature returnType="Map">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          The application whose data file is being processed.
        </Description>
      </Argument>
      <Argument name="schema">
        <Description>
          The Schema currently in use.
        </Description>
      </Argument>
      <Argument name="state">
        <Description>
          A Map containing state information.
        </Description>
      </Argument>
      <Argument name="record">
        <Description>
          A List of data tokens parsed from the current line of the data file.
        </Description>
      </Argument>
      <Argument name="cols">
        <Description>
          A List of the columns to use.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="map">
        <Description>
          A Map of the resource object assembled from the data.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import sailpoint.object.Application;
import sailpoint.object.Schema;
Map map = new HashMap();
String uid = "";
Log log = LogFactory.getLog("rule.BuildMap-HRConnect");
log.trace("Entering HRConnect BuildMap rule");
if (cols != null &amp;&amp; record != null) {
  int i = 0;
  for (String column : cols) {
    log.trace("column is: " + column);
    if (record.size() > i) {
      String colValue = (String) record.get(i);
      log.trace("colValue is: " + colValue);
      if ((colValue != null &amp;&amp; colValue.length() > 0)) {
        if (column.equals("TrustName")) {
          String trustIdCol = "TrustIdentifier";
          String trustIdVal = (String) record.get(0) + " - " + colValue;
          log.trace("trustIdVal is: " + trustIdVal);
          ArrayList trustIdList = new ArrayList&lt;String>();
          if (map.get(trustIdCol) != null) {
            trustIdList.addAll((List) map.get(trustIdCol));
          }
          trustIdList.add(trustIdVal);
          map.put(trustIdCol, trustIdList);
          ArrayList&lt;String> trustNameList = new ArrayList&lt;String>();
          if (map.get(column) != null) {
            trustNameList.addAll((List) map.get(column));
          }
          trustNameList.add(colValue);
          map.put(column, trustNameList);
        } else if (column.equals("TrustType")) {
          ArrayList&lt;String> trustTypeList = new ArrayList&lt;String>();
          if (map.get(column) != null) {
            trustTypeList.addAll((List) map.get(column));
          }
          trustTypeList.add(colValue);
          map.put(column, trustTypeList);
        } else {
          map.put(column, colValue);
        }
      }
    }
    i++;
  }
}
return map;</Source>
</Rule>
